$WarningPreference= 'Continue'
$ErrorActionPreference = 'Stop'

# Filename and Path Setup
$path= "C:\Users\Documents\jobquery"
$timestamp=Get-Date -Format dd-MM-yyyy
$CurrentDate= Get-Date -Format "MM-dd-yyyy HH:mm"
$ExcelFile = "\Jobs_Report_"+ $timestamp + ".xlsx"
$CSVFile= "\Jobs_Report_"+ $timestamp + ".csv"
$filename=$path+ $ExcelFile
$filename2= $path+ $CSVFile

Remove-Item -Path "C:\Users\Documents\jobquery\Jobs_Report_*" -Exclude "*.ps1" #Remove old files generated by script
New-Item -Path $filename2 -InformationAction SilentlyContinue #Create CSV File 

#Define headers for excel file
"Data Protection Policy,Job Id,Job State,Start Time,Current Time,Duration,Workflow Name"| Add-Content -Path $filename2

#Define Arrays to store values for each header of excel file.
$DP=@(); $JID=@(); $JS=@(); $SD=@();$WF=@();$SDF=@();$dur=@()

#Fetch Data from Jobquery command output files
[array] $workflow=(Get-Content $path\workflow.txt | ForEach-Object {$_.trim() -replace ";" })
$Junk,$workflow=$workflow | Where-Object {$_}

[array] $backup=(Get-Content $path\backup.txt | ForEach-Object {$_.trim() -replace ";" })
$Junk,$backup=$backup | Where-Object {$_}

[array] $clone=(Get-Content $path\clone.txt | ForEach-Object {$_.trim() -replace ";" })
$Junk,$clone=$clone | Where-Object {$_}

foreach ($d in $workflow){
        switch -Regex ($d) {
            "data" {$DP+=($d -split ":")[1]}
            "job id" {$JID+=($d -split ":")[1]}
            "job state" {$JS+=($d -split ":")[1]}

            "start" {[int]$udate=($d -split ":")[1]
                        $Timezone = (Get-TimeZone)
                        IF($Timezone.SupportsDaylightSavingTime -eq $True){[int]$TimeAdjust =  ($Timezone.BaseUtcOffset.TotalSeconds + 3600)}
                        ELSE{[int]$TimeAdjust = ($Timezone.BaseUtcOffset.TotalSeconds)}
                        $nudate= $udate + $TimeAdjust
                        $epoch = (Get-Date -Year 1970 -Month 1 -Day 1 -hour 0 -Minute 0 -Second 0)
                        $SD=$epoch.AddSeconds($nudate)
                        $d=(New-TimeSpan -Start $SD -End $CurrentDate).TotalHours
                        $dur+=$d
                        $SDF+=$SD
                     }
            "workflow name" {$WF+=($d -split ":")[1]}
}
}

#Print array values to CSV File 
for($i=0; $i -lt $JID.Count;$i++ ){
$Data=$DP[$i];$JObID=$JID[$i];$JobState=$JS[$i];$StartDate=$SDF[$i];$Workflow=$WF[$i];$Duration=$dur[$i]
"$Data,$JObID,$JobState,$StartDate,$CurrentDate,$Duration,$workflow" | Add-Content -Path $filename2
}
#Convert csv file to excel
$excel=Open-ExcelPackage -Path $filename -Create
$WS=Add-Worksheet -ExcelPackage $excel -WorksheetName "Workflow Jobs" -Activate 
Import-Csv $filename2 |Export-Excel -excelpackage $excel -AutoFilter -AutoSize -BoldTopRow -PassThru -WorksheetName $WS

#Now we are working on Backup Jobs 
Clear-Content -Path $filename2
"Data Protection Policy,Job Id,Job State,Start Time,Current Time,Duration,Workflow Name"| Add-Content -Path $filename2
$DP=@(); $JID=@(); $JS=@(); $SD=@();$WF=@();$SDF=@();$dur=@()

foreach ($d in $backup){
        switch -Regex ($d) {
            "data" {$DP+=($d -split ":")[1]}
            "job id" {$JID+=($d -split ":")[1]}
            "job state" {$JS+=($d -split ":")[1]}

            "start" {[int]$udate=($d -split ":")[1]
                        $Timezone = (Get-TimeZone)
                        IF($Timezone.SupportsDaylightSavingTime -eq $True){[int]$TimeAdjust =  ($Timezone.BaseUtcOffset.TotalSeconds + 3600)}
                        ELSE{[int]$TimeAdjust = ($Timezone.BaseUtcOffset.TotalSeconds)}
                        $nudate= $udate + $TimeAdjust
                        $epoch = (Get-Date -Year 1970 -Month 1 -Day 1 -hour 0 -Minute 0 -Second 0)
                        $SD=$epoch.AddSeconds($nudate)
                        $d=(New-TimeSpan -Start $SD -End $CurrentDate).TotalHours
                        $dur+=$d
                        $SDF+=$SD
                     }
            "workflow name" {$WF+=($d -split ":")[1]}
}
}

#Print array values to CSV File 
for($i=0; $i -lt $JID.Count;$i++ ){
$Data=$DP[$i];$JObID=$JID[$i];$JobState=$JS[$i];$StartDate=$SDF[$i];$Workflow=$WF[$i];$Duration=$dur[$i]
"$Data,$JObID,$JobState,$StartDate,$CurrentDate,$Duration,$workflow" | Add-Content -Path $filename2
}
$BK=Add-Worksheet -ExcelPackage $excel -WorksheetName "Backup Jobs" -Activate 
Import-Csv $filename2 |Export-Excel -excelpackage $excel -AutoFilter -AutoSize -BoldTopRow -PassThru -WorksheetName $BK

Clear-Content -Path $filename2
"Data Protection Policy,Job Id,Job State,Start Time,Current Time,Duration,Workflow Name"| Add-Content -Path $filename2
$DP=@(); $JID=@(); $JS=@(); $SD=@();$WF=@();$SDF=@();$dur=@()

foreach ($d in $clone){
        switch -Regex ($d) {
            "data" {$DP+=($d -split ":")[1]}
            "job id" {$JID+=($d -split ":")[1]}
            "job state" {$JS+=($d -split ":")[1]}

            "start" {[int]$udate=($d -split ":")[1]
                        $Timezone = (Get-TimeZone)
                        IF($Timezone.SupportsDaylightSavingTime -eq $True){[int]$TimeAdjust =  ($Timezone.BaseUtcOffset.TotalSeconds + 3600)}
                        ELSE{[int]$TimeAdjust = ($Timezone.BaseUtcOffset.TotalSeconds)}
                        $nudate= $udate + $TimeAdjust
                        $epoch = (Get-Date -Year 1970 -Month 1 -Day 1 -hour 0 -Minute 0 -Second 0)
                        $SD=$epoch.AddSeconds($nudate)
                        $d=(New-TimeSpan -Start $SD -End $CurrentDate).TotalHours
                        $dur+=$d
                        $SDF+=$SD
                     }
            "workflow name" {$WF+=($d -split ":")[1]}
}
}

#Print array values to CSV File 
for($i=0; $i -lt $JID.Count;$i++ ){
$Data=$DP[$i];$JObID=$JID[$i];$JobState=$JS[$i];$StartDate=$SDF[$i];$Workflow=$WF[$i];$Duration=$dur[$i]
"$Data,$JObID,$JobState,$StartDate,$CurrentDate,$Duration,$workflow" | Add-Content -Path $filename2
}
$CL=Add-Worksheet -ExcelPackage $excel -WorksheetName "Clone Jobs" -Activate 
Import-Csv $filename2 |Export-Excel -excelpackage $excel -AutoFilter -AutoSize -BoldTopRow -PassThru -WorksheetName $CL 

####header formatting 
Set-ExcelRange -Worksheet $CL -Range "A1:G1" -BackgroundColor Black -FontColor White -HorizontalAlignment Center -FontSize '12'
Set-ExcelRange -Worksheet $BK -Range "A1:G1" -BackgroundColor Black -FontColor White -HorizontalAlignment Center -FontSize '12'
Set-ExcelRange -Worksheet $WS -Range "A1:G1" -BackgroundColor Black -FontColor White -HorizontalAlignment Center -FontSize '12'

###Conditonal Formatting
$EC1=$WS.Dimension.End.Row
$EC2=$BK.Dimension.End.Row
$EC3=$CL.Dimension.End.Row
Add-ConditionalFormatting -Worksheet $CL -Address "A2:G$EC3" -RuleType GreaterThan "F:F" -ConditionValue2 "24" -BackgroundColor RED -Bold
Add-ConditionalFormatting -Worksheet $BK -Address "A2:G$EC2" -RuleType GreaterThan "F:F" -ConditionValue2 "24" -BackgroundColor RED -Bold
Add-ConditionalFormatting -Worksheet $WS -Address "A2:G$EC1" -RuleType GreaterThan "F:F" -ConditionValue2 "24" -BackgroundColor RED -Bold

#Save and close Excel File 
$excel.Save()
$excel.Dispose()

<#Send Email 
#$PSEmailServer
$To =""
$From=""
$Subject="Daily Job Query Report"
$Attachment=$filename
$Body=""
Send-MailMessage -From $From -To $To -Subject $Subject -Body $Body -Attachments $Attachment

#Remove Excel File
Remove-Item -Path $filename,$filename2 -WarningAction Continue#>